n <- 1000
sim <- 100
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
Dn
simulaciones[1,]
simulaciones[2,]
simulaciones[3,]
#Simularemos n muestras de una normal con mu = 2, sigma = 1
n <- 1000
sim <- 100
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
Dn
hist(Dn)
hist(Dn, density = TRUE)
lines(density(Dn),col="red",lwd=2)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",ylim=c(0,0.004),
main="Histograma del peso eviscerado",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma del peso eviscerado",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
#Simularemos n muestras de una normal con mu = 2, sigma = 1
n <- 30
sim <- 100
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 23)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 14)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 15)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 10)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 8)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 8)
lines(density(Dn),col="red",lwd=2)
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 8)
lines(density(Dn),col="red",lwd=2)
#Simularemos n muestras de una normal con mu = 2, sigma = 1
n <- 30
sim <- 1000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 8)
lines(density(Dn),col="red",lwd=2)
#Simularemos n muestras de una normal con mu = 2, sigma = 1
n <- 30
sim <- 10000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 8)
lines(density(Dn),col="red",lwd=2)
n <- 30
sim <- 100000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad", breaks = 8)
lines(density(Dn),col="red",lwd=2)
#Simularemos n muestras de una normal con mu = 2, sigma = 1
n <- 30
sim <- 100000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
#Simularemos n muestras de una normal con mu = 2, sigma = 1
n <- 30
sim <- 100000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
set.seed(12)
n <- 30
sim <- 100000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12)
n <- 30
sim <- 100000
simulaciones <- matrix(nrow = n,ncol = sim )
for (i in 1:n) {
simulaciones[i,] <- rnorm(sim, mean = 2, sd = 1)
}
Dn <- numeric(n)
for (i in 1:n) {
xbarra <- mean(simulaciones[i,])
s <- sd(simulaciones[i,])
Dn[i] <- max(pnorm(simulaciones[i,], mean = 2, sd = 1)-pnorm(simulaciones[i,], mean =xbarra, sd = s ))
}
hist(Dn,freq=FALSE, col="lightcyan",
main="Histograma de Dn ()",xlab="",ylab="Densidad")
lines(density(Dn),col="red",lwd=2)
(readxl)
library(readxl)
install.packages('readxl')
install.packages("readxl")
install.packages('lifecontingencies')
# Lista todos los paquetes instalados
installed_packages <- installed.packages()
# Obtiene los nombres de los paquetes instalados
package_names <- rownames(installed_packages)
# Actualiza los paquetes
for (package in package_names) {
install.packages(package, dependencies = TRUE)
}
# con inflacion
P/((1.03)^35) # inflacion 3%
library(readxl)
library(lifecontingencies)
library(data.table)
# Eliminamos la notación cientifica
options(scipen = 999)
library(tidyverse)
# Probabilidades de muerte
probs <- unname(unlist(read_excel("Probabilidades_Ecuador_2023_2060.xlsx", sheet = 1)[,c(3)]))
print('Hola')
print('Hola')
library(data.table)
set.seed(1L)
## Create a data table
DT <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = 1:9,
V3 = c(0.5, 1.0, 1.5),
V4 = rep(LETTERS[1:3], 3))
class(DT)
DT
#Filtrar filas
DT[3,4]
#Filtrar filas
DT[3:4]
#Filtrar filas
DT[C(1,4)]
#Filtrar filas
DT[c(1,4)]
#Filtrar filas
DT[c(1,4),]
DT[!3:7,]
DT[!3:7,]
DT[-(3:7)]
DT
#Con operaciones lógicas
DT[V2 >= 5 ]
DT[V4 %chin% c("A", "C")] # fast %in% for character
DT[V4 %in% c("A", "C")] # fast %in% for character
DT[V4 %chin% c("A")] # %chin% es mas rapido que %in% para caracteres
DT[V4 %chin% c("A") &&  V2>=5] # %chin% es mas rapido que %in% para caracteres
DT[V4 %chin% c("A") &  V2>=5] # %chin% es mas rapido que %in% para caracteres
DT[V4 %chin% c("A") &  V2>=5] # Se pueden combinar operaciones lógicas
DT
unique(DT)
class(unique(DT))
unique(DT, by = V1)
unique(DT, by = c(V1))
unique(DT, by = c('V1'))
unique(DT, by = c('V1', 'V4'))
na.omit(DT)
data.table(DF, c(3, 10, 1.7, 'A'))
data.table(DT, c(3, 10, 1.7, 'A'))
DT.vf <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = 1:9,
V3 = c(0.5, 1.0, 1.5,NA),
V4 = rep(LETTERS[1:3], 3))
DT.vf
DT.vf <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = c(1:8, NA),
V3 = c(0.5, 1.0, 1.5,NA),
V4 = rep(LETTERS[1:3], 3))
DT.vf
DT.vf <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = c(1:8, NA),
V3 = c(0.5, 1.0,NA),
V4 = rep(LETTERS[1:3], 3))
DT.vf
na.omit(DT.vf, cols = 1:4)
na.omit(DT.vf)
na.omit(DT.vf, cols = c('V4'))
na.omit(DT.vf, cols = c('V3'))
DT.vf <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = c(1:8, NA),
V3 = c(0.5, NA, 1.0),
V4 = rep(LETTERS[1:3], 3))
DT.vf <- data.table(V1 = rep(c(1L, 2L), 5)[-10],
V2 = c(1:8, NA),
V3 = c(0.5, NA, 1.0),
V4 = rep(LETTERS[1:3], 3))
na.omit(DT.vf) # Deja solo las filas con valores completos en todas las variables
na.omit(DT.vf, cols = c('V3'))
na.omit(DT.vf, cols = c(3))
na.omit(DT.vf, cols = c(3, 'V2'))
na.omit(DT.vf, cols = c(3, 2))
DT[sample(.N, 3)]
DT[sample(.N, 3)]
DT[sample(.N, 3)]
.N
.N
data.frame(X = c(1,2), Y = (1.3, 3))
data.table(X = c(1,2), Y = c(1.3, 3))
.N
P <- data.table(X = c(1,2), Y = c(1.3, 3))
.n
.N
P[sample(.N, 1)]
.N
P
P@a
.N
P <- data.table(X = rep(c(1,2), 10), Y = c(1.3, 3))
P
.N
P[sample(.N, 4)]
.N
P[sample(.N, 4)]
P[sample(.N, 10)]
P[sample(.N, 10)]
.M
.N
.N
DT
DT[sample(.N, 3)]
DT[sample(.N, .N / 2)]
DT
DT[sample(.N, .N / 2)]
.N / 2
DT[frankv(-V1, ties.method = "dense") < 2]
frankv(-V1, ties.method = "dense")
library(tidyverse)
DF %>% slice_max(V1, n = 1)
DT %>% slice_max(V1, n = 1)
DF %>% slice_max(n = 1)
DT %>% slice_max(V1, n = 2)
DT %>% slice_max(V1, n = 0)
DT %>% slice_max(V1, n = 4)
DT %>% slice_max(V2, n = 4)
DT[V4 %like% "^B"]
DT[V4 %like% "^B"]
DT[V4 %IN% "^B"]
DT[V4 %in% "^B"]
DT[V4 == "^B"]
DT[V4 == "B"]
DT[V4 %in% "B"]
DT[V4 %like% "^B"]
DT[V4 %like% "^B"]
DT[V2 %between% c(3, 5)]
DT[V2 %inrange% list(-1:1, 1:3)]
DT[V2 %inrange% list(-1:1, 2:2)]
DT[V2 %inrange% list(-1:1, 2:3)]
DT[V2 %inrange% list(-1:1, 3:1)]
DT[V2 %inrange% list(-1:1, 2:3)]
DT[V2 %inrange% list(-1:1, 1:3)]
DT[V2 %in% list(-1:3)]
DT[V2 %in% c(-1:3)]
DT[data.table::between(V2, 3, 5, incbounds = FALSE)]
DT[V2 %inrange% list(-1:1, 1:3)]
#Ordenar Filas-------------------------------------------------------------------
DT[order(V3)]
DT[order(V1, -V2)]
#Seleccionar columnas------------------------------------------------------------
DT[[3]] # returns a vector
DT[, 3]  # returns a data.table
DT[, list(V2)] # returns a data.table
DT[, .(V2)]    # returns a data.table
DT[, list(V2)] # returns a data.table
# . is an alias for list
DT[, "V2"]     # returns a data.table
DT[, V2]       # returns a vector
DT[["V2"]]     # returns a vector
DT[, .(V2, V3, V4)]
DT[, list(V2, V3, V4)]
DT[, V2:V4] # select columns between V2 and V4
DT[, V2:V4] # select columns between V2 and V4
DT[, !c("V2", "V3")]
DT[, list(-V2)]
DT[, list(-V2)]
DT
DT[, list(-V2)]
DT[, !c("V2", "V3")]
cols <- c("V2", "V3")
cols <- c("V2", "V3")
DT[, ..cols] # .. ese prefijo significa 'un nivel arriba'
DT[, ..cols]
DT[, !..cols]
cols <- paste0("V", 1:2)
cols
DT[, ..cols]
cols <- union("V4", names(DT))
cols
DT[, ..cols]
cols
cols <- grep("V",   names(DT))
cols
DT[, ..cols]
cols <- grep("3$",  names(DT))
cols
cols <- grep("$3",  names(DT))
cols
cols <- grep("3$",  names(DT))
cols
cols <- grep(".2",  names(DT))
cols
cols <- grep("^V1|X$",  names(DT))
cols
cols
cols
DT[, ..cols]
DT[, sum(V1)]
DT[sum(V1), ]
DT[,sum(V1,V2) ]
DT[,sum(V1) ]
DT[, .(sum(V1))]
DT[, .(sumV1 = sum(V1))]
DT[, .(sum(V1), sd(V3))]
DT[, .(sumv1 = sum(V1),
sdv3  = sd(V3))]
DT[1:4, sum(V1)]
1:4
DT[1:4
DT[1:4, sum(V1)]
DT[1:4, sum(V1)]
DT[1:4]
DT[, data.table::first(V3)]
DT
DT[, data.table::first(V3)]
DT[, data.table::last(V3)]
DT[5, V3]
DT[, uniqueN(V4)]
V4)
DT[, uniqueN(V4)]
uniqueN(DT)
DT
#Agregar/actualizar/eliminar columnas--------------------------------------------
DT[, V1 := V1^2]
DT
DT
#Agregar/actualizar/eliminar columnas--------------------------------------------
DT[, V1 := V1^2]
DT[5, V3]
DT
install.packages('minpack.lm')
0.0033*50000*0.5
0.0033*50000*0.5
0.033*50000*0.5
0.33/100
50/100
0.0033*50000*0.5
0.5*50000*0.5
setwd("//wsl.localhost/Debian/home/pachina/OpenLinTim/LinTim/datasets/Instancia1/basis")
library(tidyverse)
Stop <- read.table('Stop.giv',header = FALSE, sep = ';')
PP <- Paradas_y_cambios %>% dplyr::filter(Paradas_nuevas != 645)
PP <- PP %>% mutate(nuevas_nuevas = ifelse(Paradas_nuevas > 645, Paradas_nuevas-1, Paradas_nuevas))
#Carga de datos
PO <- read.table('Paradas_TOMEBAMBA.txt',header = FALSE, sep = ';')
setwd("D:/Documentos/Semestre 2024-A/Tesis/Generar la matriz OD")
#Carga de datos
PO <- read.table('Paradas_TOMEBAMBA.txt',header = FALSE, sep = ';')
#Arreglo de los índices de paradas
Paradas_originales <- sort(unique(PO$V1))
Paradas_nuevas <- seq(1,length(Paradas_originales))
Paradas_y_cambios <- data.frame(Paradas_originales,Paradas_nuevas)
setwd("//wsl.localhost/Debian/home/pachina/OpenLinTim/LinTim/datasets/Instancia1/basis")
PP <- Paradas_y_cambios %>% dplyr::filter(Paradas_nuevas != 645)
PP <- PP %>% mutate(nuevas_nuevas = ifelse(Paradas_nuevas > 645, Paradas_nuevas-1, Paradas_nuevas))
summary(PP)
PPP <- PP %>% select(Paradas_originales, nuevas_nuevas)
Arcos <- read.table('Edge.giv',header = FALSE, sep = ';')
Lineas <- read.table('Pool.giv',header = FALSE, sep = ';')
une_lineas <- function(li, lr){
return(Lineas %>%
dplyr::filter(V1 %in% c(li,lr)) %>% mutate(V1 = li, V2 = seq(1, length(V1))) )
}
Linea1 <- une_lineas(1,21)
Linea2 <- une_lineas(2,22)
Linea3 <- une_lineas(3,23)
Linea4 <- une_lineas(4,24)
Linea5 <- une_lineas(5,25)
Linea6 <- une_lineas(6,26)
Linea7 <- une_lineas(7,27)
Linea8 <- une_lineas(8,28)
Linea9 <- une_lineas(9,29)
Linea10 <- une_lineas(10,30)
Linea11 <- une_lineas(11,31)
Linea12 <- une_lineas(12,32)
Linea13 <- une_lineas(13,33)
Linea14 <- une_lineas(14,34)
Linea15 <- une_lineas(15,35)
Linea16 <- une_lineas(16,36)
Linea17 <- une_lineas(17,37)
Linea18 <- une_lineas(18,38)
Linea19 <- une_lineas(19,39)
Linea20 <- une_lineas(20,40)
lineas <- paste("Linea", seq(1, 20), sep = "")
dim(rbind(Linea1,Linea2,Linea3,Linea4,Linea5,Linea6,
Linea7,Linea8,Linea9,Linea10,Linea11,Linea12,Linea13,
Linea14,Linea15,Linea16,Linea17,Linea18,Linea19,Linea20))
Lineas_uni <- rbind(Linea1,Linea2,Linea3,Linea4,Linea5,Linea6,
Linea7,Linea8,Linea9,Linea10,Linea11,Linea12,Linea13,
Linea14,Linea15,Linea16,Linea17,Linea18,Linea19,Linea20)
Lineas_input2 <- rbind(Linea1,Linea3,Linea4,Linea5,Linea6,
Linea7,Linea8,Linea9,Linea10,Linea11,Linea12,Linea13,
Linea14,Linea15,Linea16,Linea17,Linea18,Linea19,Linea20)
Linea2
Linea2arcos <- Linea2$V3
Arcos %>% dplyr::filter(V1 %in% Linea2arcos)
input <- Arcos %>% dplyr::filter(V1 %in% Linea2arcos)
stops_quitar <- c(input$V2, 561)
Arcos <- read.table('OD.giv',header = FALSE, sep = ';')
OD <- read.table('OD.giv',header = FALSE, sep = ';')
head(OD)
OD %>% mutate(V3 = if_else(V1 %in% stops_quitar | V2 %in% stops_quitar, 0, V3))
ODm2 <- OD %>% mutate(V3 = if_else(V1 %in% stops_quitar | V2 %in% stops_quitar, 0, V3))
sum(ODm2$V3)
sum(OD$V3)
